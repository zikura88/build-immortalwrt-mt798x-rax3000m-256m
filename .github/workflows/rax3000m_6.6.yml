# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions

name: Build rax3000m_6.6

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/zikura88/immortalwrt-mt798x-6.6.git
  REPO_BRANCH: openwrt-24.10-6.6
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: rax3000m_6.6_251003.config
  DIY_P1_SH: diy-part1.sh
  DIY_P3_SH: diy-part3.sh
  TZ: Asia/Shanghai
  DEVICE: rax3000m
  UPLOAD_OUTPUT: true
  CLASH_CORE_DIR: openwrt/files/etc/openclash/core

jobs:
  build:
    runs-on: ubuntu-24.04
    permissions:
      contents: write

    steps:
    - name: 🔁 Checkout Repository (patches, config, scripts)
      uses: actions/checkout@main
      with:
        path: repo

    - name: 🖥️ 检查服务器配置
      if: ${{ !cancelled() }}
      run: |
        echo "⚠️ 警告：若服务器性能不足，请及时取消任务并重试！"
        echo "✅ 已知编译成功CPU：8370C, 8171M"
        echo "❌ 已知性能不足CPU：8272CL, E5系列"
        echo "-------------------------- CPU信息 --------------------------"
        echo "物理CPU数量: $(cat /proc/cpuinfo | grep 'physical id' | sort | uniq | wc -l)"
        echo "核心/型号: $(cat /proc/cpuinfo | grep 'core id' | sort | uniq | wc -l) × $(cat /proc/cpuinfo | grep 'model name' | head -1 | cut -d: -f2 | xargs)"
        echo "-------------------------- 内存信息 --------------------------"
        sudo lshw -short -C memory | grep GiB || echo "❌ 无法获取内存信息"
        echo "-------------------------- 硬盘信息 --------------------------"
        df -Th / /mnt

    - name: 🛠️ 初始化编译环境
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo apt-get -qq update
        sudo apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2404) jq file --no-install-recommends
        sudo apt-get -qq autoremove --purge
        sudo apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$USER /mnt/workdir

    - name: 📦 克隆 OpenWrt 源码
      working-directory: /mnt/workdir
      run: |
        git clone "$REPO_URL" -b "$REPO_BRANCH" openwrt
        ln -sf /mnt/workdir/openwrt "$GITHUB_WORKSPACE/openwrt"
        echo "✅ OpenWrt 源码已克隆至 /mnt/workdir/openwrt"

    - name: 📂 加载自定义配置与文件
      run: |
        cd openwrt || { echo "❌ 进入 openwrt 目录失败"; exit 1; }

        # 复制 feeds.conf
        if [ -e "../repo/$FEEDS_CONF" ]; then
          mv "../repo/$FEEDS_CONF" feeds.conf.default
          echo "✅ feeds.conf 已加载"
        fi

        [ -e repo/files ] && mv repo/files openwrt/files
        [ -e repo/$CONFIG_FILE ] && mv repo/$CONFIG_FILE openwrt/.config

        # 赋予脚本可执行权限
        [ -e "../repo/$DIY_P1_SH" ] && chmod +x "../repo/$DIY_P1_SH" && echo "✅ diy-part1.sh 可执行权限已添加"
        [ -e "../repo/$DIY_P3_SH" ] && chmod +x "../repo/$DIY_P3_SH" && echo "✅ diy-part3.sh 可执行权限已添加"

    - name: 🧩 执行 DIY-P1 脚本
      run: |
        cd openwrt
        if [ -e "../repo/$DIY_P1_SH" ]; then
          ../repo/$DIY_P1_SH
          echo "✅ diy-part1.sh 执行完成"
        else
          echo "⚠️ diy-part1.sh 不存在，跳过"
        fi

    - name: 🔄 更新 Feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: 📦 安装 Feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: 🛠️ 执行 DIY-P3 脚本
      run: |
        cd openwrt
        if [ -e "../repo/$DIY_P3_SH" ]; then
          ../repo/$DIY_P3_SH
          echo "✅ diy-part3.sh 执行完成"
        else
          echo "⚠️ diy-part3.sh 不存在，跳过"
        fi

    - name: 🧱 替换 libxcrypt Makefile
      run: |
        cp repo/custom-files/libxcrypt-Makefile openwrt/feeds/packages/libs/libxcrypt/Makefile
        echo "✅ Custom libxcrypt Makefile 已应用"
        ls -l openwrt/feeds/packages/libs/libxcrypt/Makefile

    - name: 📥 自动检测并下载 Mihomo 内核 (arm64)
      run: |
        MIHOMO_REPO="MetaCubeX/mihomo"
        RELEASE_TAG="Prerelease-Alpha"
        CORE_DIR="openwrt/files/etc/openclash/core"
        TIMEOUT=30

        ROOT_DIR=$(pwd)
        FULL_CORE_DIR="$ROOT_DIR/$CORE_DIR"
        FULL_TARGET_FILE="$FULL_CORE_DIR/clash_meta"

        echo "🔧 准备安装 Mihomo 内核..."

        # 检查 .config
        if [ ! -f "openwrt/.config" ]; then
          echo "❌ 错误：openwrt/.config 不存在！"
          exit 1
        fi

        # 检测架构
        TARGET_ARCH=$(grep CONFIG_TARGET_ARCH openwrt/.config | cut -d= -f2 | tr -d '"')
        echo "📌 原始架构: $TARGET_ARCH"

        if [[ "$TARGET_ARCH" == aarch64* ]]; then
          COMMON_ARCH="aarch64"
        elif [[ "$TARGET_ARCH" == arm* ]]; then
          COMMON_ARCH="arm"
        else
          COMMON_ARCH="$TARGET_ARCH"
        fi
        echo "🔄 通用架构: $COMMON_ARCH"

        case "$COMMON_ARCH" in
          "aarch64") MIHOMO_ARCH="arm64" ;;
          *) echo "❌ 不支持的架构: $COMMON_ARCH"; exit 1 ;;
        esac
        echo "✅ 映射为 Mihomo 架构: $MIHOMO_ARCH"

        # 获取下载链接
        echo "🌐 获取 GitHub Release 信息..."
        ASSET_URL=$(curl -s --fail "https://api.github.com/repos/$MIHOMO_REPO/releases/tags/$RELEASE_TAG" | \
          jq -r '.assets[].browser_download_url' | \
          grep -i "linux-$MIHOMO_ARCH" | \
          grep -i "alpha" | \
          grep -i "\.gz$" | \
          head -n1)

        if [ -z "$ASSET_URL" ]; then
          echo "❌ 未找到 mihomo-linux-$MIHOMO_ARCH-alpha*.gz 文件！"
          exit 1
        fi
        echo "✅ 找到内核: $ASSET_URL"

        # 下载、解压、移动
        mkdir -p "$FULL_CORE_DIR"
        wget -O /tmp/mihomo.gz --no-check-certificate --timeout=$TIMEOUT --tries=3 "$ASSET_URL" || { echo "❌ 下载失败"; exit 1; }
        gunzip /tmp/mihomo.gz || { echo "❌ 解压失败"; rm -f /tmp/mihomo.gz; exit 1; }
        mv /tmp/mihomo "$FULL_TARGET_FILE" || { echo "❌ 移动失败"; exit 1; }
        chmod +x "$FULL_TARGET_FILE"

        # 校验
        FILE_INFO=$(file "$FULL_TARGET_FILE")
        if echo "$FILE_INFO" | grep -q "aarch64"; then
          echo "✅ 成功！文件为 aarch64 架构：$FILE_INFO"
        else
          echo "❌ 失败！文件不是 aarch64 架构：$FILE_INFO"
          rm -f "$FULL_TARGET_FILE"
          exit 1
        fi

        "$FULL_TARGET_FILE" -v || echo "ℹ️ 版本信息无法显示"

        echo "🎉 Mihomo 内核安装完成！"

    - name: 🔐 SSH 连接（可选）
      uses: P3TERX/ssh2actions@v1.0.0
      if: github.event.inputs.ssh == 'true'
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 📥 下载依赖包
      run: |
        cd openwrt
        make defconfig
        make download -j$(nproc)
        echo "🔍 检查下载失败的包（<1KB）:"
        find dl -size -1024c -exec ls -lh {} \;

    - name: 🔧 编译固件
      run: |
        cd openwrt
        make -j$(nproc) V=s
        echo "FILE_DATE=$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV

    - name: 📤 上传输出文件
      uses: actions/upload-artifact@v4
      if: ${{ env.UPLOAD_OUTPUT == 'true' && !cancelled() }}
      with:
        name: ${{ env.DEVICE }}--${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 🗂️ 整理输出文件
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "✅ 清理完成"

    - name: 📦 发布至 GitHub Release
      uses: ncipollo/release-action@v1
      if: ${{ !cancelled() }}
      with:
        tag: "${{ env.DEVICE }}--${{ env.FILE_DATE }}"
        artifacts: "openwrt/bin/targets/*/*/*"
        body: |
          # ⚠️ 未经测试
          - 设备: ${{ env.DEVICE }}
          - IP: 192.168.5.1
          - 密码: 无
          - 内核: Mihomo Prerelease-Alpha (arm64)
